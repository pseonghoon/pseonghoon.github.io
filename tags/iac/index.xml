<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IaC on 박성훈의 블로그</title>
    <link>https://pseonghoon.github.io/tags/iac/</link>
    <description>Recent content in IaC on 박성훈의 블로그</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>2020</copyright>
    <lastBuildDate>Mon, 14 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://pseonghoon.github.io/tags/iac/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWSCLI가 포함된 Lambda layer 만들기</title>
      <link>https://pseonghoon.github.io/post/awscli-in-labmda-layer/</link>
      <pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://pseonghoon.github.io/post/awscli-in-labmda-layer/</guid>
      <description>
        
          &lt;p&gt;Python으로 작성된 Lambda function이 AWSCLI를 실행할 수 있도록 AWSCLI가 포함된 Lambda layer를 만드는 방법을 공유한다. AWSCLI는 다소 특이한 Python 모듈일 뿐이기 때문에 일반적인 Python 모듈의 경우에도 활용할 수 있다.&lt;/p&gt;
&lt;h1 id=&#34;lambda-layer&#34;&gt;Lambda layer&lt;/h1&gt;
&lt;p&gt;Lambda layer는 AWS Lambda 서비스에서 Lambda function이 필요로 하는 라이브러리 코드를 재활용하기 위한 도구이다. 자세한 내용은 &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html&#34;&gt;https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html&lt;/a&gt; 에서 찾을 수 있다.&lt;/p&gt;
&lt;p&gt;Python 모듈을 Lambda function의 deployment package 안에 직접 넣는 것보다 Lambda layer를 만드는 것이 편리하다. 해당 모듈을 사용하는 여러 Lambda function에서 layer를 가져다 쓰면서 재활용할 수 있기 때문이다.&lt;/p&gt;
&lt;h1 id=&#34;lambda-function에서-awscli를-써야-하는-경우&#34;&gt;Lambda function에서 AWSCLI를 써야 하는 경우&lt;/h1&gt;
&lt;p&gt;Python runtime을 사용하는 Lambda function에서 AWS API 호출을 하려면
AWSCLI를 실행하는 것보다 AWS의 Python SDK인 boto3 mo을 사용하는 것이 더 좋은 방법이다.
코딩하기도 편하고 boto3는 Python runtime에 포함되어 있기 때문에 바로 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;AWSCLI는 아래처럼 boto3에서 해당 기능을 지원하지 않는 명령에만 사용하는 것이 좋다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;aws eks update-kubeconfig&lt;/li&gt;
&lt;li&gt;aws s3 sync&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;aws eks update-kubeconfig 명령은 Lambda function에서 EKS 클러스터에 접속할 때 kubeconfig 설정을 위해 필요하다.&lt;/p&gt;
&lt;h1 id=&#34;lambda-layer-용-zip-파일-생성-방법&#34;&gt;Lambda layer 용 zip 파일 생성 방법&lt;/h1&gt;
&lt;p&gt;우선 &lt;a href=&#34;https://github.com/pyenv/pyenv&#34;&gt;pyenv&lt;/a&gt;와 &lt;a href=&#34;https://virtualenv.pypa.io/en/latest/installation.html&#34;&gt;virutalenv&lt;/a&gt;를 설치해야 한다.&lt;/p&gt;
&lt;p&gt;pyenv로 Lambda runtime에 맞는 Python 버전을 설치한다.
예를 들어 python3.8 용 layer를 생성하기 위해 3.8.11 을 설치할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;pyenv install 3.8.11 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://gist.github.com/pseonghoon/89a9421536016f52dff5d34a20e832dc&#34;&gt;zip-lambda-layer-awscli.sh&lt;/a&gt; 스크립트를 다운로드한 후 아래처럼 layer를 구성하는 zip 파일을 만든다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ sh zip-lambda-layer-awscli.sh 3.8.11 
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 생성되는 파일은 아래와 같다.&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;$ ls *.zip
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;lambda-layer-awscli-python38.zip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Terraform으로 아래처럼 Lambda layer와 function을 만들 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-hcl&#34; data-lang=&#34;hcl&#34;&gt;&lt;span class=&#34;ln&#34;&gt; 1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 실제로는 아래처럼 aws_lambda_layer_version을 직접 만들지 말고, 이것을 생성하는 테라폼 모듈을 만들어서 재사용해야 한다.
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt; 3&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;resource&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;aws_lambda_layer_version&amp;#34; &amp;#34;awscli_python38&amp;#34;&lt;/span&gt; {
&lt;span class=&#34;ln&#34;&gt; 4&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;  filename&lt;/span&gt;   &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;./lambda-layer-awscli-python38.zip&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 5&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;  compatible_runtimes&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;python3.8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 6&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 7&lt;/span&gt;  }
&lt;span class=&#34;ln&#34;&gt; 8&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt; 9&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;resource&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;aws_lambda_function&amp;#34; &amp;#34;main&amp;#34;&lt;/span&gt; {
&lt;span class=&#34;ln&#34;&gt;10&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;  runtime&lt;/span&gt;          &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;python3.8&amp;#34;&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;12&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;  layers&lt;/span&gt;           &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;aws_lambda_layer_version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;awscli_python38&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;arn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;13&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;14&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Lambda function을 구성하는 Python 스크립트에서 아래처럼 사용하면 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# PATH 환경 변수에 포함된 /opt/bin/ 아래에 aws가 있어서 경로 지정을 하지 않아도 된다.&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;subprocess&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;aws --version&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shell&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;check&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;zip-lambda-layer-awsclish-스크립트&#34;&gt;zip-lambda-layer-awscli.sh 스크립트&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://gist.github.com/pseonghoon/89a9421536016f52dff5d34a20e832dc&#34;&gt;zip-lambda-layer-awscli.sh&lt;/a&gt;의 내용은 아래와 같다.&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/pseonghoon/89a9421536016f52dff5d34a20e832dc.js&#34;&gt;&lt;/script&gt;

&lt;h1 id=&#34;참고-zip-파일-구성&#34;&gt;[참고] zip 파일 구성&lt;/h1&gt;
&lt;p&gt;bin/ 아래에 aws 명령과 그것이 의존하는 Python 모듈을 설치한다.&lt;/p&gt;
&lt;p&gt;zip 파일 내의 bin/ 디렉토리는 Lambda 실행 환경에선 /opt/bin/ 디렉토리가 된다.
/opt/bin/ 디렉토리는 Lambda function의 PATH 환경 변수에 포함되어 있기 때문에 Lambda function은 aws 명령을 경로 지정 없이 실행할 수 있다.&lt;/p&gt;
&lt;p&gt;Python은 sys.path 변수에 포함된 디렉토리에서 import하는 module들을 찾는다. Lambda function의 sys.path 변수는 /opt/ 아래 다양한 디렉토리를 포함한다.
하지만 이 layer에 포함된 모듈들은 lambda function이 아니라 /opt/bin/aws 스크립트에서 import 하기 위한 것이다. 그런데 aws 명령의 sys.path 변수에는 /opt/ 아래 디렉토리들이 포함되지 않는다. aws 명령이 awscli 모듈을 찾을 수 있게 하려면 명령과 동일한 디렉토리인 /opt/bin/ 아래에 모듈을 넣어야 한다.&lt;/p&gt;
&lt;p&gt;Lambda는 layer를 포함한 &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.html&#34;&gt;deployment package의 크기를 제한&lt;/a&gt;한다. 따라서 zip 파일과 deployment package의 크기를 줄이기 위해 Python 버전별로 layer를 따로 만든다.&lt;/p&gt;
&lt;h1 id=&#34;참고한-문서&#34;&gt;참고한 문서&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/invocation-layers.html&#34;&gt;https://docs.aws.amazon.com/lambda/latest/dg/invocation-layers.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html&#34;&gt;https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/python-package.html&#34;&gt;https://docs.aws.amazon.com/lambda/latest/dg/python-package.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bezdelev.com/hacking/aws-cli-inside-lambda-layer-aws-s3-sync/&#34;&gt;https://bezdelev.com/hacking/aws-cli-inside-lambda-layer-aws-s3-sync/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
        
      </description>
    </item>
    
    <item>
      <title>로컬에서 개발 중인 Ansible role 테스트하기</title>
      <link>https://pseonghoon.github.io/post/testing-ansible-role/</link>
      <pubDate>Tue, 16 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://pseonghoon.github.io/post/testing-ansible-role/</guid>
      <description>
        
          &lt;p&gt;개발 중인 Ansible role을 편리하게 테스트하기 위해 사용하고 있는 방법을 공유한다. Ansible이 제시하는 정석대로 role을 다루는 경우에 적합한 방법이라 그 정석에 대해서도 살펴본다.&lt;/p&gt;
&lt;p&gt;이어질 내용을 요약하면 아래와 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ansible role을 다루는 정석
&lt;ol&gt;
&lt;li&gt;role 하나 당 Git repository 하나&lt;/li&gt;
&lt;li&gt;ansible-galaxy로 필요한 role들을 다운로드&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;symbolic link를 쓰면 개발 중인 role의 테스트를 편하게 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;ansible-role&#34;&gt;Ansible Role&lt;/h1&gt;
&lt;p&gt;Ansible playbook을 여러개 만들다 보면 중복되는 코드가 생긴다. 동일한 코드가 여러 벌이 되면 관리가 불가능해지기 때문에 이런 것들은 &amp;lsquo;모듈&amp;rsquo; 혹은 &amp;lsquo;라이브러리&amp;rsquo; 로 만들어 재사용해야 하는데 Ansible에선 role이 그런 역할을 한다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.ansible.com/ansible/latest/user_guide/playbooks_reuse_roles.html&#34;&gt;https://docs.ansible.com/ansible/latest/user_guide/playbooks_reuse_roles.html&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;ansible-role을-다루는-정석&#34;&gt;Ansible role을 다루는 정석&lt;/h1&gt;
&lt;h3 id=&#34;1-role-당-git-repository-하나&#34;&gt;1. role 당 Git repository 하나&lt;/h3&gt;
&lt;p&gt;모든 코드는 Git으로 관리해야 한다. Ansible role도 예외가 아니다.&lt;/p&gt;
&lt;p&gt;Ansible role의 Git repository는 어떤 단위로 만들어야 할까? 하나의 Git repository 에서 여러 role들을 포함하는 방법을 생각할 수도 있는데 role마다 Git repository를 만드는 것이 Ansible이 제시하는 체계에 맞는 방법이다.&lt;/p&gt;
&lt;p&gt;전자를 생각했다면 role 하나의 코드 분량이 많지 않은데 전용 Git repository를 만드는 것은 비효율적이라는 생각 때문일 것이다. &lt;u&gt;하지만 Git repository는 관리 대상 코드가 논리적으로 독립된 것이기만 하면 코드의 분량과 관계 없이 만들 수 있고 그렇게 하는 것이 바람직하다&lt;/u&gt;. Git repository 하나가 방대한 리눅스 커널 코드를 관리할 수도 있지만 스크립트 하나를 관리해도 문제될 것이 없다. 관리 비용 때문에 repository 수를 쉽게 늘리기 어려운 Subversion과 차별화되는 점이다.&lt;/p&gt;
&lt;p&gt;개별 Git repository로 관리하면 아래와 같은 장점이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ansible-galaxy가 role을 다운로드하는 체계에 부합한다. requirements.yml에서 필요한 role마다 Git repository와 branch를 설정하는 방식이다.&lt;/li&gt;
&lt;li&gt;각각의 role 별로 원하는 branch의 코드를 사용할 수 있다. master branch에 merge되기 전 개발용 branch의 코드를 사용할 수 있다.&lt;/li&gt;
&lt;li&gt;로컬에서 role을 수정하면서 테스트하기 편리하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-ansible-galaxy로-다운로드&#34;&gt;2. ansible-galaxy로 다운로드&lt;/h3&gt;
&lt;p&gt;playbook이 있는 디렉토리에 &lt;code&gt;requirements.yml&lt;/code&gt; 을 만들고 다운로드할 role의 목록을 작성한다.
예를 들어 아래처럼 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://git.psh.kr/ansible_role/ec2_linux_common.git&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;scm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;git&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;ec2_linux_common&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;master &lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;https://git.psh.kr/ansible_role/cloudwatch_agent.git&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;scm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;git&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;ln&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;master&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;아래처럼 필요한 role들을 다운로드하는 스크립트를 만들어 쓰면 편리하다. 파일 이름은 &lt;code&gt;get_roles.sh&lt;/code&gt; 이라고 하자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;ansible-galaxy install --force --ignore-errors -r requirements.yml -p roles
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 스크립트는 &lt;code&gt;requirements.yml&lt;/code&gt;에 기술된 role들을 roles/ 디렉토리에 다운로드한다.
Ansible playbook은 기본적으로 roles/ 디렉토리에서 role을 찾는다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;--force 옵션은 이미 다운받은 role을 최신 코드로 업데이트하기 위해 필요하다.&lt;/li&gt;
&lt;li&gt;--ignore-errors 옵션은 뒤에 설명할 symbolic link를 이용해 테스트하는 방법을 쓸 때 ansible-galaxy가 중간에 에러를 내고 멈추지 않게 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;아래는 &lt;code&gt;roles/.gitignore&lt;/code&gt; 의 내용이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;*
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;!.gitignore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;.gitignore&lt;/code&gt;를 제외한 모든 다운받은 role 코드를 Git이 무시하게 한다.&lt;/p&gt;
&lt;h1 id=&#34;symbolic-link로-테스트&#34;&gt;Symbolic link로 테스트&lt;/h1&gt;
&lt;p&gt;위에서 설명한 것처럼 &lt;code&gt;requirements.yml&lt;/code&gt;에 필요한 role을 기술해서 다운로드 받아 써야 한다. 하지만 로컬에서 수정 중인 role을 테스트할 때도 같은 방식을 쓰면 코드 변경을 할때마다 git commit, push 후 ansible-galaxy 실행을 반복해야 해서 불편하다.&lt;/p&gt;
&lt;p&gt;해결책은 roles/ 아래에 다운로드한 디렉토리를 삭제하고, 작업 중인 로컬 Git repository를 가리키는 symbolic link를 만드는 것이다. ansible-galaxy 명령을 --force 옵션으로 실행해도 symbolic link는 덮어쓰지 않는다는 점을 활용한 것이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;$ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; roles 
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# 다운로드한 role 삭제&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;$ rm -rf ec2_linux_common
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;# symbolic link인 ec2_linux_common 이 작업 디렉토리인  ~/git/ansible_role/ec2_linux_common 을 가리키게 된다.&lt;/span&gt;
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;$ ln -s ~/git/ansible_role/ec2_linux_common .  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이렇게 하면 코드를 수정한 후 commit, push할 필요 없이 role을 사용하는 playbook을 바로 실행해 테스트할 수 있다.&lt;/p&gt;
&lt;p&gt;아래는 &lt;code&gt;get_roles.sh&lt;/code&gt; 을 실행한 결과이다. ansible-galaxy가 warning 메시지를 출력하지만 symbolic link는 보존된다.&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&#34;https://pseonghoon.github.io/post/img/get_roles_result.png&#34;/&gt; 
&lt;/figure&gt;
        
      </description>
    </item>
    
    <item>
      <title>코드로 인프라 관리하기 (IaC)</title>
      <link>https://pseonghoon.github.io/post/infrastructure-as-code/</link>
      <pubDate>Mon, 05 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://pseonghoon.github.io/post/infrastructure-as-code/</guid>
      <description>
        
          &lt;p&gt;&lt;code&gt;링크&lt;/code&gt;: &lt;a href=&#34;https://drive.google.com/file/d/1Bsc5hic_p8nNfGTSa8Dz4UXx49PVFOd4/view?usp=sharing&#34;&gt;코드로 인프라 관리하기 (ppt)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Games on AWS 2019에서 발표한 자료다. 당시 청중 설문에서 가장 좋은 평가를 받았다.
Infrastructure as Code, 더 나아가 자동화를 통해 무엇을 얻을 수 있는지, 잘 정착되게 하려면 어떤 것을 신경써야 하는지를 정리했다.&lt;/p&gt;
&lt;p&gt;사내에서 경영진 대상으로 발표했던 자료를 행사의 성격에 맞게 수정해서 사용했다.
2017년부터 2년 간의 구현 경험으로 쓴 것이다.&lt;/p&gt;
        
      </description>
    </item>
    
  </channel>
</rss>
